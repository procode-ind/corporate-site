---
import type { Locale } from '../i18n';
import { t } from '../i18n';
const { lang = 'es' } = Astro.props as { lang?: Locale };
const FORMSPREE_ID = 'xvgqdvzr'; // tu ID
---

<section id="contact" class="relative py-20">
  <!-- Background gradient similar to other sections -->
  <div class="absolute inset-0 bg-gradient-to-b from-black/20 via-black/30 to-black/40"></div>

  <div class="container-xl relative">
    <div class="mx-auto max-w-4xl text-center">
      <h2 class="text-4xl font-bold tracking-tight text-white md:text-5xl">
        {t(lang, 'contact.title')}
      </h2>
      <p class="mt-4 text-lg text-white/80 md:text-xl">
        {t(lang, 'contact.desc')}
      </p>

      <!-- Success/Error Messages -->
      <div id="form-messages" class="mt-8 hidden">
        <div
          id="success-message"
          class="card hidden border-green-500/30 bg-green-900/20 p-6 text-green-300"
        >
          <span class="success-text">✅ {t(lang, 'contact.success')}</span>
        </div>
        <div
          id="error-message"
          class="card hidden border-red-500/30 bg-red-900/20 p-6 text-red-300"
        >
          <span class="error-text">❌ {t(lang, 'contact.error')}</span>
        </div>
      </div>

      <!-- Contact Form Card -->
      <div class="card mx-auto mt-12 max-w-2xl p-8 text-left">
        <form
          id="contact-form"
          action={`https://formspree.io/f/${FORMSPREE_ID}`}
          method="POST"
          class="space-y-6"
        >
          <!-- Honeypot anti-spam -->
          <input type="text" name="_gotcha" class="hidden" tabindex="-1" autocomplete="off" />

          <!-- Asunto fijo -->
          <input type="hidden" name="_subject" value="Nuevo mensaje desde ProCode Ind" />

          <div class="grid gap-6 md:grid-cols-2">
            <div class="space-y-2">
              <label for="name" class="block text-sm font-medium text-white/90">
                {t(lang, 'contact.name')}
              </label>
              <input
                id="name"
                name="name"
                type="text"
                required
                class="w-full rounded-xl border border-[var(--color-border)] bg-white/5 p-4 text-white placeholder-white/50 transition-colors outline-none focus:border-[var(--color-primary)] focus:bg-white/10"
                placeholder={t(lang, 'contact.name')}
              />
            </div>
            <div class="space-y-2">
              <label for="email" class="block text-sm font-medium text-white/90">
                {t(lang, 'contact.email')}
              </label>
              <input
                id="email"
                name="email"
                type="email"
                required
                class="w-full rounded-xl border border-[var(--color-border)] bg-white/5 p-4 text-white placeholder-white/50 transition-colors outline-none focus:border-[var(--color-primary)] focus:bg-white/10"
                placeholder={t(lang, 'contact.email')}
              />
            </div>
          </div>

          <div class="space-y-2">
            <label for="message" class="block text-sm font-medium text-white/90">
              {t(lang, 'contact.msg')}
            </label>
            <textarea
              id="message"
              name="message"
              rows="6"
              required
              class="w-full resize-none rounded-xl border border-[var(--color-border)] bg-white/5 p-4 text-white placeholder-white/50 transition-colors outline-none focus:border-[var(--color-primary)] focus:bg-white/10"
              placeholder={t(lang, 'contact.msg')}></textarea>
          </div>

          <div class="flex flex-col items-center gap-4">
            <button
              type="submit"
              id="submit-btn"
              class="btn-primary w-full min-w-[200px] text-white disabled:cursor-not-allowed disabled:opacity-50 md:w-auto"
            >
              <span class="submit-text">{t(lang, 'contact.send')}</span>
              <span class="loading-text hidden">
                <span
                  class="mr-2 inline-block h-4 w-4 animate-spin rounded-full border-2 border-white/30 border-t-white"
                ></span>
                <span class="loading-text-content">{t(lang, 'contact.sending')}</span>
              </span>
            </button>

            <p class="text-center text-xs text-white/60">
              {t(lang, 'contact.privacy')}
            </p>
          </div>
        </form>
      </div>
    </div>
  </div>
</section>

<script define:vars={{ lang }}>
  // Enhanced form handling with AJAX
  document.addEventListener('DOMContentLoaded', function () {
    const form = document.getElementById('contact-form');
    const submitBtn = document.getElementById('submit-btn');
    const messagesContainer = document.getElementById('form-messages');
    const successMessage = document.getElementById('success-message');
    const errorMessage = document.getElementById('error-message');

    if (!form || !submitBtn) return;

    form.addEventListener('submit', async function (e) {
      e.preventDefault();

      // Show loading state
      setLoadingState(true);
      hideMessages();

      try {
        const formData = new FormData(form);
        const response = await fetch(form.action, {
          method: 'POST',
          body: formData,
          headers: {
            Accept: 'application/json',
          },
        });

        if (response.ok) {
          // Success - show success message and clear form
          showSuccessMessage();
          form.reset();

          // Auto-hide success message after 5 seconds
          setTimeout(() => {
            hideMessages();
          }, 5000);
        } else {
          // Error from server
          showErrorMessage();
        }
      } catch (error) {
        // Network or other error
        showErrorMessage();
      } finally {
        setLoadingState(false);
      }
    });

    function setLoadingState(loading) {
      const submitText = submitBtn.querySelector('.submit-text');
      const loadingText = submitBtn.querySelector('.loading-text');

      if (loading) {
        submitBtn.disabled = true;
        submitText.classList.add('hidden');
        loadingText.classList.remove('hidden');
      } else {
        submitBtn.disabled = false;
        submitText.classList.remove('hidden');
        loadingText.classList.add('hidden');
      }
    }

    function showSuccessMessage() {
      hideMessages();
      messagesContainer.classList.remove('hidden');
      successMessage.classList.remove('hidden');

      // Smooth scroll to message
      successMessage.scrollIntoView({ behavior: 'smooth', block: 'nearest' });
    }

    function showErrorMessage() {
      hideMessages();
      messagesContainer.classList.remove('hidden');
      errorMessage.classList.remove('hidden');

      // Smooth scroll to message
      errorMessage.scrollIntoView({ behavior: 'smooth', block: 'nearest' });
    }

    function hideMessages() {
      messagesContainer.classList.add('hidden');
      successMessage.classList.add('hidden');
      errorMessage.classList.add('hidden');
    }
  });
</script>
